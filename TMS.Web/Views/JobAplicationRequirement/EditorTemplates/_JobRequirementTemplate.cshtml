@model TMS.Library.Entities.Jobs.JobsRequirement
@using lr = Resources.Resources
@{
    var PrimaryLanguageName = TMS.TMSHelper.PrimaryLangName();
    var PrimaryLanguageFlag = TMS.TMSHelper.PrimaryLangFlag();
    var SecondaryLanguageName = TMS.TMSHelper.SecondaryLangName();
    var SecondaryLanguageFlag = TMS.TMSHelper.SecondaryLangFlag();
}
<script>
    function onDOBChange(e) {
        var dt = e.sender;
        var value = dt.value();

        if (value === null) {
            value = kendo.parseDate(dt.element.val(), dt.options.parseFormats);
        }

        if (value < dt.min()) {
            dt.value(dt.min());
        } else if (value > dt.max()) {
            dt.value(dt.max());
        }
    }
    //jQuery(".country_Code").ready(function () {
    //    jQuery(".country_Code").val(134);
    //})
</script>
<div class="Alertbox alert alert-danger" style="display:none">
    <ul class="errors"></ul>
</div>
<div class="form-horizontal form-person-popup">
    <div id="personeditdiv">
        <div class="form-group">
            @Html.LabelFor(model => model.ID, new { @class = "col-md-3 col-lg-3 control-label" })
            <div class="col-md-7 col-lg-7 col-sm-11">
                @Html.Kendo().TextBoxFor(model => model.ID).HtmlAttributes(new { @class = "form-control ", @disabled = "disabled", @style = " width: 100%;" })
            </div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.JobTitle, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.JobTitle).HtmlAttributes(new { @class = "form-control  txtrequired", @placeholder = "Job Title", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.JobTitle)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Description, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().EditorFor(model => model.Description).Tools(tools => tools
                           .Clear()
                           .BackColor()
                           .Bold()
                           .Italic()
                           .InsertOrderedList()
                           .InsertUnorderedList()
                           .JustifyCenter()
                           .JustifyFull()


                          ).HtmlAttributes(new { @class = "form-control  txtrequired", @placeholder = "Job Description", @dir = @PLDIR, @style = " width: 100%;" }))
            @Html.ValidationMessageFor(model => model.Description)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.SkillSet, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.SkillSet).HtmlAttributes(new { @class = "form-control  txtrequired", @placeholder = "Job Skill Set", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.SkillSet)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CareerLevel, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(c => c.CareerLevel).DataTextField("Text").DataValueField("Value")
                                                                                                                                                      .OptionLabel(lr.CareerLevel)
                                                                                                                                                      // .OptionLabel(new { Text = lr.GenderOptionallabel, Value = 0 })
                                                                                                                                                      .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%" })
                                                                                                                                                                             .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.Entities.Jobs.CareerLevel>(typeof(TMS.Library.Entities.Jobs.CareerLevel))))
            @Html.ValidationMessageFor(model => model.CareerLevel)
        </div>
    </div>
    <div class="form-group country_Code" id="country_Code">
        @Html.LabelFor(model => model.Location, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(m => m.Location)

                                                                                                                    .HtmlAttributes(new { style = "width:100%" })
                                                                                                                    .DataTextField("Text")
                                                                                                                    .DataValueField("Value")
                                                                                                                    .Filter("contains")

                                                                                                                       .AutoBind(true).SelectedIndex(111).Value("134")
                                                                                                                     .OptionLabel(lr.PersonPhoneCountryCodeOptionalLabel)
                                                                                                                    //   .OptionLabel(new { Text = lr.PersonPhoneCountryCodeOptionalLabel, Value = 0 })
                                                                                                                    .DataSource(dataSource =>
                                                                                                                    {
                                                                                                                        dataSource.Read(
                                                                                                                                 read =>
                                                                                                                                 {
                                                                                                                                     read.Action("CountryCode", "DDL");
                                                                                                                                 }
                                                                                                                                 ).ServerFiltering(false);
                                                                                                                    })
            )
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.SalaryRangeFrom, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-3 col-lg-2 col-sm-11">
            @Html.Kendo().NumericTextBoxFor(model => model.SalaryRangeFrom).Min(1).HtmlAttributes(new { @class = "txtrequired", @type = "number", @placeholder = "Salary Range From", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.SalaryRangeFrom)
        </div>
        @Html.LabelFor(model => model.SalaryRangeTo, new { @class = "control-label col-lg-2 pull-left " })
        <div class="col-md-3 col-lg-3 col-sm-11">
            @Html.Kendo().NumericTextBoxFor(model => model.SalaryRangeTo).Min(1).HtmlAttributes(new { @class = "txtrequired pull-left", @type = "number", @placeholder = "Salary Range To", @dir = @PLDIR, @style = " width: 85%;" })
            @Html.ValidationMessageFor(model => model.SalaryRangeTo)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Type, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-3 col-lg-2 col-sm-11">
            @(Html.Kendo().DropDownListFor(c => c.Type).DataTextField("Text").DataValueField("Value")
              .OptionLabel(lr.Type)
              // .OptionLabel(new { Text = lr.GenderOptionallabel, Value = 0 })
              .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%" })
                                     .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.Entities.Jobs.JobType>(typeof(TMS.Library.Entities.Jobs.JobType))))

            @Html.ValidationMessageFor(model => model.Type)
        </div>
        @Html.LabelFor(model => model.Timing, new { @class = "control-label col-lg-2  pull-left" })
        <div class="col-md-3 col-lg-3 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.Timing).HtmlAttributes(new { @class = "txtrequired", @placeholder = "Job Timing", @dir = @PLDIR, @style = " width: 85%;" })
            @Html.ValidationMessageFor(model => model.Timing)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NoOfPositions, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-3 col-lg-2 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.NoOfPositions).HtmlAttributes(new { @class = "form-control  txtrequired", @placeholder = "Job Timing", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.NoOfPositions)
        </div>   
        @Html.LabelFor(model => model.LastDateToApply, new { @class = "control-label col-lg-2  pull-left" })
        <div class="col-md-3 col-lg-3 col-sm-11">
            @(Html.Kendo().DatePickerFor(x => x.LastDateToApply)
                                                                                                                        .Start(CalendarView.Month)
                                                                                                                        .Depth(CalendarView.Month)
                                                                                                                        .Format(KendoDateFormat)

                                                                                                                        //.OptionLabel(new { Text = lr.OfficialIDTypeOptionalLabel, Value = 0 })
                                                                                                                        .HtmlAttributes(new { style = "width: 85%;" })
                                                                                                                        .Events(e => e.Change("onDOBChange")))


            @*@(Html.Kendo().DatePickerFor(model => model.DateOfBirth).Start(CalendarView.Month).Depth(CalendarView.Month).Format(KendoDateFormat).Value("").HtmlAttributes(new { style = "width: 100%;padding-bottom: 10px;", @class = "txtrequired" }).Max(DateTime.Now).Events(e => e.Change("onDOBChange")))*@
            @*@Html.ValidationMessageFor(model => model.DateOfBirth)*@
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.EducationRequired, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.EducationRequired).HtmlAttributes(new { @class = "form-control pmidddlename", @placeholder = "Education Requirement", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.EducationRequired)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.MinExperiance, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-3 col-lg-2 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.MinExperiance).HtmlAttributes(new { @class = "form-control  plast_name txtrequired", @placeholder = "Minimum Experiance", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.MinExperiance)
        </div>    
        @Html.LabelFor(model => model.MaxExperiance, new { @class = "control-label col-lg-2  pull-left" })
        <div class="col-md-3 col-lg-3 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.MaxExperiance).HtmlAttributes(new { @class = "form-control nickname txtrequired", @placeholder = "Maximum Experiance", @dir = @PLDIR, @style = " width: 85%;" })
            @Html.ValidationMessageFor(model => model.MaxExperiance)
        </div>
    </div><div class="form-group">
    @Html.LabelFor(model => model.Gender, new { @class = "col-md-3 col-lg-3 control-label" })
    <div class="col-md-3 col-lg-2 col-sm-11">
        @(Html.Kendo().DropDownListFor(c => c.Gender).DataTextField("Text").DataValueField("Value")
                                                                                                                                                .OptionLabel(lr.GenderOptionallabel)
                                                                                                                                                // .OptionLabel(new { Text = lr.GenderOptionallabel, Value = 0 })
                                                                                                                                                .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%" })
                                                                                                                                                                       .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.Gender>(typeof(TMS.Library.Gender))))

    </div>
    @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-lg-2  pull-left" })
    <div class="col-md-3 col-lg-3 col-sm-11">
        @Html.Kendo().CheckBoxFor(model => model.IsActive)
    </div>
</div>
    <div class="form-group">
        @Html.LabelFor(model => model.FunctionalArea, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.FunctionalArea).HtmlAttributes(new { @class = "form-control  plast_name txtrequired", @placeholder = "Functional Area", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.FunctionalArea)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Allowance, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.Allowance).HtmlAttributes(new { @class = "form-control  plast_name txtrequired", @placeholder = "Allowances", @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.Allowance)
        </div>
    </div>
</div>






    @*<div class="form-group" style="margin:0; padding:0px;">
            @Html.LabelFor(model => model.ProfilePicture, new { @class = "col-md-3 col-lg-3 control-label" })
            <div class="col-md-7 col-lg-7 col-sm-11">

                <input id="fileupload" name="fileupload" type="file" />
                @Html.ValidationMessageFor(model => model.ProfilePicture)
            </div>


        </div>*@













    @*<script>
        jQuery(document).ready(function (e) {
            jQuery('.pfirstname , .pmiddlename , .plast_name, .nickname').bind('keypress blur', function () {
                jQuery('.pdisplayname').val(jQuery('.pfirstname').val() + ' ' +
                    jQuery('.pmidddlename').val() + ' ' +
                    jQuery('.plast_name').val() + ', ' +
                    jQuery('.nickname').val()
                ).change();
            });

        });
    </script>

    <script>
    jQuery(document).ready(function (e) {
        var roles=@ViewData["RoleID"];


        if (roles == '2') {
            jQuery(".islogin").show();
        }
        else {
            jQuery(".islogin").hide();
            jQuery(".pwd").text("");
        } });
    jQuery(".pwd").hide();
    jQuery(".islogin").hide();

    jQuery(function () {
        var roles=@ViewData["RoleID"];
        jQuery("#IsLogin").click(function () {
            if (jQuery(this).is(':checked')) {
                jQuery(".pwd").show();
            }
            else {
                jQuery(".pwd").hide();
            }
        });



    });

    </script>
    <script>
        jQuery(document).ready(function () {
            jQuery('._leadID').hide();

            jQuery('#rolename').click(function () {
                var checked_status = this.checked;
                if (checked_status == true) {
                    jQuery('._leadID').show();
                }
                else {
                    jQuery('._leadID').hide();
                }
            });
        });

    </script>*@
